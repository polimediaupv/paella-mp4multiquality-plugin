{"version":3,"file":"paella-mp4multiquality-plugin.js","mappings":"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","sources":["webpack://paella-mp4multiquality-plugin/webpack/universalModuleDefinition","webpack://paella-mp4multiquality-plugin/./src/plugins/MP4MultiQualityPluginsModule.js","webpack://paella-mp4multiquality-plugin/./src/plugins/es.upv.paella.mp4MultiQualityVideoFormat.js","webpack://paella-mp4multiquality-plugin/./src/plugins/ sync \\.js","webpack://paella-mp4multiquality-plugin/external umd {\"commonjs\":\"paella-core\",\"commonjs2\":\"paella-core\",\"amd\":\"paella-core\"}","webpack://paella-mp4multiquality-plugin/webpack/bootstrap","webpack://paella-mp4multiquality-plugin/webpack/runtime/compat get default export","webpack://paella-mp4multiquality-plugin/webpack/runtime/define property getters","webpack://paella-mp4multiquality-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://paella-mp4multiquality-plugin/webpack/runtime/make namespace object","webpack://paella-mp4multiquality-plugin/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"paella-core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"paella-core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"paella-mp4multiquality-plugin\"] = factory(require(\"paella-core\"));\n\telse\n\t\troot[\"paella-mp4multiquality-plugin\"] = factory(root[undefined]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__179__) => {\nreturn ","import { PluginModule } from \"paella-core\";\nimport packageData from \"../../package.json\";\n\nlet g_pluginModule = null;\n\nexport default class MP4MultiQualityPluginsModule extends PluginModule {\n    static Get() {\n        if (!g_pluginModule) {\n            g_pluginModule = new MP4MultiQualityPluginsModule();\n        }\n        return g_pluginModule;\n    }\n\n    get moduleName() {\n        return packageData.name;\n    }\n\n    get moduleVersion() {\n        return packageData.version;\n    }\n\n}","import { VideoPlugin, VideoQualityItem, Mp4Video, supportsVideoType } from 'paella-core';\n\nexport class Mp4MultiQualityVideo extends Mp4Video {\n    async getQualities() {\n        if (!this._qualities) {\n            this._qualities = this._sources.map((src, i) => new VideoQualityItem({\n                index: i,\n                label: `${src.res.w}x${src.res.h}`,\n                shortLabel: `${src.res.h}p`,\n                width: src.res.w,\n                height: src.res.h,\n                src: src.src,\n            }));\n        }\n\n        return this._qualities;\n    }\n\n    async setQuality(q) {\n        if (!(q instanceof VideoQualityItem)) {\n            throw new Error(\"Invalid parameter setting video quality\");\n        }\n\n        this.player.log.debug(`org.opencast.paella.mp4MultiQualityVideoFormat: Change video quality to ${q.shortLabel}`);\n        this._currentQuality = q;\n\n        // Clear data, set the `src` attribute to the new video file and then\n        // set some values to previous values.\n        const currentTime = this.video.currentTime;\n        const playbackRate = this.video.playbackRate;\n        this.clearStreamData();\n        this.video.src = q.src;\n        this.video.currentTime = currentTime;\n        this.video.playbackRate = playbackRate;\n        this.video.addEventListener('ended', this._endedCallback);\n\n        // Wait for the `canplay` event to know that the video has loaded sufficiently.\n        await new Promise(resolve => {\n            const f = () => {\n                this._ready = true;\n                this.video.pause();\n                this.video.removeEventListener('canplay', f);\n                resolve(null);\n            };\n            this.video.addEventListener('canplay', f);\n        });\n    }\n\n    get currentQuality() {\n        return this._currentQuality;\n    }\n\n    async loadStreamData(streamData = null) {\n        // this.player.log.debug(\"es.upv.paella.mp4MultiQualityVideoFormat: loadStreamData\");\n        this._sources = null;\n        this._sources = streamData.sources.mp4;\n        this._sources.sort((a,b) => {\n            return Number(a.res.w) - Number(b.res.w);\n        });\n\n        if (!this._qualities) {\n            const qualities = await this.getQualities();\n\n            // Select a fitting initial quality\n            const screenRes = [window.screen.width, window.screen.height]\n                .map(x => x * window.devicePixelRatio);\n            let screenMin = Math.min(screenRes[0], screenRes[1]);\n            let screenMax = Math.max(screenRes[0], screenRes[1]);\n\n            // This is the test recommended by MDN:\n            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n            //\n            // Of course, ideally one wouldn't have to look at the user agent string\n            // at all and would get the information one wants via different means.\n            // But for what we want to query, there are no different means. The\n            // `devicePixelRatio` helps only marginally. Network speed information\n            // API is still unstable. Since this is only the initial quality and\n            // this test works well the vast majority of times, it makes sense to\n            // just use it. We use something between 720p and 1080p as resolution\n            // target. The YouTube app seems to use 720p as default.\n            const isMobile = /Mobi/i.test(window.navigator.userAgent);\n            if (isMobile) {\n                screenMin = Math.max(screenMin, 900);\n                screenMax = Math.max(screenMin, 1600);\n            }\n\n            // Find the largest video that still fully fits inside the screen. The\n            // array is already sorted in ascending order. Note that we only\n            // compare the minimums and maximums to not run into landscape vs.\n            // portrait mode problems. Ideally, we would change the quality when\n            // the device is turned, but that would be way more involved.\n            let qualityIndex = 0;\n            for (let i = 1; i < this._sources.length; i += 1) {\n                const src = this._sources[i];\n                const srcMin = Math.min(src.res.w, src.res.h);\n                const srcMax = Math.max(src.res.w, src.res.h);\n                if (srcMin <= screenMin && srcMax <= screenMax) {\n                    qualityIndex = i;\n                }\n            }\n\n            this._currentQuality = qualities[qualityIndex];\n        }\n        this._currentSource = this._sources[this._currentQuality.index];\n\n        await super.loadStreamData(streamData);\n    }\n}\n\nexport default class Mp4MultiQualityVideoFormatPlugin extends VideoPlugin {\n    get streamType() {\n        return \"mp4\";\n    }\n\n    get name() {\n        return \"es.upv.paella.mp4MultiQualityVideoFormat\";\n    }\n\n    isCompatible(streamData) {\n        const { mp4 } = streamData.sources;\n        return mp4 && supportsVideoType(mp4[0]?.mimetype);\n    }\n\n    async getVideoInstance(playerContainer, isMainAudio) {\n        return new Mp4MultiQualityVideo(this.player, playerContainer, isMainAudio, this.config);\n    }\n}\n","var map = {\n\t\"./MP4MultiQualityPluginsModule.js\": 640,\n\t\"./es.upv.paella.mp4MultiQualityVideoFormat.js\": 974\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 109;","module.exports = __WEBPACK_EXTERNAL_MODULE__179__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Mp4MultiQualityVideoFormat from './plugins/es.upv.paella.mp4MultiQualityVideoFormat';\n\nexport default function getMP4MultiQualityContext() {\n    return require.context(\"./plugins\", true, /\\.js/)\n}\n\nexport const MP4MultiQualityPlugins = [\n    {\n        plugin: Mp4MultiQualityVideoFormat,\n        config: {\n            enabled: true\n        }\n    }\n];\n\nexport const Mp4MultiQualityVideoFormatPlugin = Mp4MultiQualityVideoFormat;\n"],"names":["root","factory","exports","module","require","define","amd","undefined","self","__WEBPACK_EXTERNAL_MODULE__179__","g_pluginModule","MP4MultiQualityPluginsModule","_PluginModule","_classCallCheck","_callSuper","arguments","_inherits","key","value","get","packageData","PluginModule","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","apply","err","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","toPrimitive","String","_toPrimitive","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","_get","bind","property","receiver","base","object","_superPropBase","desc","getOwnPropertyDescriptor","subClass","superClass","_setPrototypeOf","Mp4MultiQualityVideo","_Mp4Video","_loadStreamData","_setQuality","_getQualities","_callee","_context","this","_qualities","_sources","map","src","VideoQualityItem","index","label","concat","res","w","shortLabel","width","height","_callee2","q","currentTime","playbackRate","_this","_context2","player","log","debug","_currentQuality","video","clearStreamData","addEventListener","_endedCallback","_ready","pause","removeEventListener","_x","_callee3","streamData","qualities","screenRes","screenMin","screenMax","qualityIndex","srcMin","srcMax","_args3","_context3","sources","mp4","sort","b","Number","getQualities","window","screen","x","devicePixelRatio","Math","min","max","test","navigator","userAgent","_currentSource","Mp4Video","Mp4MultiQualityVideoFormatPlugin","_VideoPlugin","_getVideoInstance","_mp4$","supportsVideoType","mimetype","_callee4","playerContainer","isMainAudio","_context4","config","_x2","_x3","VideoPlugin","webpackContext","req","id","webpackContextResolve","__webpack_require__","code","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","obj","prop","getMP4MultiQualityContext","MP4MultiQualityPlugins","plugin","Mp4MultiQualityVideoFormat","enabled"],"sourceRoot":""}